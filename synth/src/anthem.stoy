uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)

uniform float pitch; //! slider[0.0, 0.0, 6.283185]
uniform float yaw; //! slider[0.0, 0.0, 6.283185]
uniform float roll; //! slider[0.0, 0.0, 6.283185]

uniform sampler2D tex; //! texture["/Users/ramon/Desktop/ramon.jpg"]

uniform float posX; //! slider[-1.0, 0.1, 2.0]
uniform float posY; //! slider[-1.0, 0.1, 2.0]
uniform float zoom; //! slider[0.0, 0.1, 1.0]

uniform int imgResX; //! slider[30, 1, 960]
uniform int imgResY; //! slider[30, 1, 960]

uniform float colPow; //! slider[2.0, 0.2, 7.0]
uniform float colMult; //! slider[1.0, 0.2, 6.0]

void mainImage( inout vec4 fragColor, in vec2 fragCoord )
{
    vec2 offset = vec2(posX, posY);
    vec2 p = zoom * fragCoord/iResolution.xy + offset;

    p.x *= iResolution.x / iResolution.y;

    float real = 0.5 * cos(pitch + 0.006 * cos(iGlobalTime));
    float imag = 0.5 * sin(yaw   + 0.003 * sin(iGlobalTime));
    vec2 cc = vec2( real, imag );
    cc *= 1.1;

    vec4 dm = vec4(2000.0);
    float d1 = 1000.0; // based on sine of imaginary part
    float d2 = 1000.0; // based on sine of real part
    float d3 = 1000.0; // distance to origin
    float d4 = 1000.0; // based on the fractional decimals of the complex number
    vec2 z = (-1.0 + 2.0 * p);
    for(int i = 0; i < 80; i++)
    {
        z = cc + vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y );
        d1 = min(d1, abs(z.y + sin(z.y)));
        d2 = min(d2, abs(1.0+z.x + 0.5*sin(z.x)));
        d3 = min(d3, dot(z,z));
        d4 = min(d4, length(fract(z)-0.5));

    }
    vec3 color;

    vec3 image_sample_1 = texture(tex, vec2(30.0)).xyz;
    vec3 image_sample_2 = texture(tex, vec2(imgResX/2.0, imgResY/2.0)).xyz;
    vec3 image_sample_3 = texture(tex, vec2(imgResX-30.0, imgResY-30.0)).xyz;

    vec3 image = texture(tex, clamp(pow(abs(z.xy), vec2(0.5)), vec2(0.0), vec2(imgResX, imgResY))).xyz;
    image = texture(tex, fragCoord.xy/iResolution.xy).xyz;
    color = image;
    color = vec3( d4 );
//    color = mix( color, image_sample_1, min(1.0,pow(d1*0.25,0.20)) );
//    color = mix( color, image_sample_2, min(1.0,pow(d2*0.50,0.50)) );
//    color = mix( color, image_sample_3, 1.0 - min(1.0,pow(d3,0.15) ));
//
//    color = mix(color, image.xyz, pow(d3, 0.3));
//    color = colMult * pow(color, vec3(colPow));
//    color = clamp(color, vec3(0.0), vec3(1.0));

    fragColor = vec4(color,1.0);
}

void main() {
    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
    mainImage(color, gl_FragCoord.xy);

    gl_FragColor = color;
}

//! <preset file="anthem.preset" />
